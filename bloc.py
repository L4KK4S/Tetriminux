from random import choices
from plate import print_grid


# list of avaiable blocks
all_blocs = [
    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 2, 0, 0, 0],
     [2, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 2, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [0, 2, 0, 0, 0],
     [0, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [2, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 2, 0, 0, 0],
     [2, 2, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [0, 2, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [0, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [2, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [0, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [2, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 2, 0, 0],
     [2, 2, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 2, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [0, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 2, 0, 0],
     [0, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 2, 2, 0, 0],
     [2, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 2, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [2, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 2, 2, 0]],

    [[0, 0, 0, 0, 0],
     [2, 2, 2, 2, 0],
     [2, 2, 2, 2, 0],
     [2, 2, 2, 2, 0],
     [2, 2, 2, 2, 0]],

    [[0, 0, 0, 0, 0],
     [0, 2, 2, 0, 0],
     [2, 2, 2, 2, 0],
     [2, 2, 2, 2, 0],
     [0, 2, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [2, 0, 0, 2, 0],
     [2, 0, 0, 2, 0],
     [2, 0, 0, 2, 0],
     [2, 2, 2, 2, 0]],

    [[0, 0, 0, 0, 0],
     [2, 2, 2, 2, 0],
     [0, 0, 0, 2, 0],
     [0, 0, 0, 2, 0],
     [0, 0, 0, 2, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 2, 2, 0],
     [2, 2, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [2, 2, 2, 0, 0],
     [0, 0, 2, 0, 0],
     [0, 0, 2, 0, 0],
     [2, 2, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [2, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 2, 2, 0],
     [2, 2, 2, 2, 0]],

    [[2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 2, 2, 2],
     [2, 0, 0, 0, 2]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 2, 2, 2]],

    [[0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 2, 0],
     [2, 2, 2, 2, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 2, 2, 0],
     [0, 2, 2, 0, 0],
     [2, 2, 0, 0, 0],
     [2, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [0, 2, 2, 0, 0],
     [0, 0, 2, 2, 0],
     [0, 0, 0, 2, 0]],

    [[0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [0, 2, 2, 0, 0],
     [0, 0, 2, 2, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 2, 0],
     [0, 0, 2, 2, 0],
     [0, 2, 2, 0, 0],
     [2, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [2, 2, 2, 2, 0],
     [0, 2, 2, 0, 0],
     [0, 2, 2, 0, 0],
     [0, 2, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [2, 0, 0, 2, 0],
     [0, 2, 2, 0, 0],
     [0, 2, 2, 0, 0],
     [2, 0, 0, 2, 0]],

    [[2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 2, 0],
     [2, 2, 2, 2, 0],
     [0, 0, 0, 2, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 2, 2, 2]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 2, 2, 0],
     [0, 0, 0, 2, 0]],

    [[0, 0, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [0, 2, 0, 0, 0],
     [0, 2, 0, 0, 0],
     [0, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 2, 2, 2],
     [0, 2, 2, 2, 0],
     [0, 0, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [2, 2, 2, 2, 0],
     [2, 2, 2, 2, 0],
     [2, 2, 2, 2, 0],
     [2, 2, 2, 2, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 2, 2, 0, 0],
     [0, 0, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 0, 0, 0],
     [0, 2, 0, 0, 0],
     [0, 2, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 2, 0, 0],
     [2, 2, 2, 0, 0],
     [2, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 2, 2, 0, 0],
     [0, 2, 0, 0, 0],
     [2, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 2, 0, 0],
     [0, 2, 0, 0, 0],
     [2, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [0, 2, 0, 0, 0],
     [0, 0, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 2, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 0, 0, 0, 0],
     [2, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 2, 0, 0, 0],
     [2, 2, 2, 0, 0],
     [0, 2, 0, 0, 0]],

    [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [2, 2, 0, 0, 0]]
]

def print_bloc(grid):
    """
        Shows available blocks by input grid shape.

        :param grid: The shape of the grid.
        :type grid: str
        :return: The list of th blocks avaiable.
        :rtype: list
        :Example:
             >>> print_bloc("triangle")
            [
                [[0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0],
                 [2, 0, 0, 0, 0],
                 [2, 2, 0, 0, 0]],

                [[0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0],
                 [0, 2, 0, 0, 0],
                 [2, 2, 0, 0, 0]], ...

    """
    blocs_avaiable = all_blocs[:19]
    if grid == "cerlce":
        blocs_avaiable = blocs_avaiable + all_blocs[20:32]
    elif grid == "losange":
        blocs_avaiable = blocs_avaiable + all_blocs[32:46]
    elif grid == "triangle":
        blocs_avaiable = blocs_avaiable + all_blocs[46:58]
    return all_blocs

def select_bloc(blocks_avaiable, n):

    """
        Selects a block among the avaiable blocks.

        :param all_blocs: All the blocks avaiable.
        :type all_blocs: list
        :param n: The index of the block to select.
        :type n: list
        :return: The matrix of the choosed block.
        :rtype: list
        :Example:
             >>> select_bloc(print_bloc("triangle"), 2)
            [
             [0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0],
             [0, 2, 0, 0, 0],
             [2, 2, 0, 0, 0]
             ]

    """
    if n < len(blocks_avaiable):
        return blocks_avaiable[n-1]

def draw_choices(shape):
    """
            Draw 3 differents blocks.

            :param: shape
            :type : list
            :return: list
            :rtype: list
            :Example:
                 >>> draw_choices(shape)
                  ╔═══════════╗      ╔═══════════╗      ╔═══════════╗
                  ║ ° ° ° ° ° ║      ║ ° ° ° ° ° ║      ║ ■ ° ° ° ° ║
                  ║ ° ° ° ° ° ║      ║ ° ■ ° ° ° ║      ║ ■ ° ° ° ° ║
                  ║ ° ■ ■ ■ ° ║      ║ ° ■ ° ° ° ║      ║ ■ ° ° ° ° ║
                  ║ ° ■ ■ ■ ° ║      ║ ° ■ ■ ■ ° ║      ║ ■ ° ° ° ° ║
                  ║ ° ° ° ° ° ║      ║ ° ° ° ° ° ║      ║ ■ ■ ■ ■ ■ ║
                  ╚═══════════╝      ╚═══════════╝      ╚═══════════╝
        """
    bloks_avaiable = print_bloc(shape)
    list = choices(bloks_avaiable, k=3)
    all_lines = ["   ╔═══════════╗   " * 3, "", "", "", "", "", "   ╚═══════════╝   "*3, "      Bloc 1             Bloc 2             Bloc 3"]
    for i, e in enumerate(list):
        for j, row in enumerate(e):
            all_lines[j+1] += "   ║ "
            for case in row:
                if case == 0:
                    all_lines[j+1] += "◦ "
                elif case == 1:
                    all_lines[j+1] += "  "
                elif case == 2:
                    all_lines[j+1] += "■ " 
            all_lines[j+1] += "║   "

    for line in all_lines:
        print(line)

    return list

def print_all_choices(shape):
    if shape == 1:
        all_blocks = print_bloc("losange")
    elif shape == 2:
        all_blocks = print_bloc("cercle")
    else:
        all_blocks = print_bloc("triangle")

    for block in all_blocks:
        print___bloc(block)

def print_bloc_by_shape(shape):
    if shape == 1:
        all_blocks = print_bloc("losange")
    elif shape == 2:
        all_blocks = print_bloc("cercle")
    else:
        all_blocks = print_bloc("triangle")


    all_lines = ["╔═══════════╗ " * len(all_blocks), "", "", "", "", "", "╚═══════════╝ " * len(all_blocks)]
    for i, e in enumerate(all_blocks):
        for j, row in enumerate(e):
            all_lines[j + 1] += "║ "
            for case in row:
                if case == 0:
                    all_lines[j + 1] += "◦ "
                elif case == 1:
                    all_lines[j + 1] += "  "
                elif case == 2:
                    all_lines[j + 1] += fg('blue') + "■ " + fg('dark_goldenrod')
            all_lines[j + 1] += "║ "
    for i, line in enumerate(all_lines):
        print(line)

